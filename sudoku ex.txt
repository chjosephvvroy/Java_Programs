    



public class SudokuSolver {
    public static void main(String[] args) {
        int[][] sudoku = {
            { 0, 0, 3, 0, 0, 0, 0, 9, 0 },
            { 0, 5, 6, 3, 0, 0, 7, 1, 0  },
            {  0, 9, 0, 6, 0, 0, 5, 3, 0  },
            {  0, 0, 5, 0, 4, 1, 0, 7, 0  },
            {  0, 0, 1, 0, 0, 0, 2, 0, 0 },
            {  0, 7, 0, 2, 8, 0, 6, 0, 0  },
            {  0, 1, 2, 0, 0, 9, 0, 6, 0  },
            {  0, 6, 4, 0, 0, 5, 9, 8, 0  },
            {  0, 8, 0, 0, 0, 0, 1, 0, 0  }
        };
 
        if (solveSudoku(sudoku)) {
            System.out.println("Sudoku solved successfully:");
            printSudoku(sudoku);
        } else {
            System.out.println("Unable to solve the Sudoku puzzle.");
        }
    }
 
    private static boolean solveSudoku(int[][] sudoku) {
        int row = -1;
        int col = -1;
        boolean isBlank = false;
 
        // Find the next empty cell in the Sudoku grid
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (sudoku[i][j] == 0) {
                    row = i;
                    col = j;
                    isBlank = true;
                    break;
                }
            }
          
            if (isBlank) {
                break;
            }
        }
 
        // If no empty cells found, the Sudoku is solved
        if (!isBlank) {
            return true;
        }
 
        // Try different numbers from 1 to 9 in the empty cell
        for (int num = 1; num <= 9; num++) {
            if (isSafe(sudoku, row, col, num)) {
                sudoku[row][col] = num;
 
                // Recursively solve the remaining Sudoku
                if (solveSudoku(sudoku)) {
                    return true;
                }
 
                // If the current number doesn't lead to a solution, backtrack
                sudoku[row][col] = 0;
            }
        }
 
        return false;
    }
 
        private static boolean isSafe(int[][] sudoku, int row, int col, int num) {
        // Check if the number already exists in the same row
        for (int c = 0; c < 9; c++) {
            if (sudoku[row][c] == num) {
                return false;
            }
        }
 
        // Check if the number already exists in the same column
        for (int r = 0; r < 9; r++) {
            if (sudoku[r][col] == num) {
                return false;
            }
        }
 
        // Check if the number already exists in the same 3x3 subgrid
        int subgridStartRow = (row / 3) * 3;
        int subgridStartCol = (col / 3) * 3;
        for (int r = 0; r < 3; r++) {
            for (int c = 0; c < 3; c++) {
                if (sudoku[subgridStartRow + r][subgridStartCol + c] == num) {
                    return false;
                }
            }
        }
 
        return true;
    }
     private static void printSudoku(int[][] sudoku) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                System.out.print(sudoku[i][j] + " ");
            }
            System.out.println();
        }
    }
}